// Add a touch-accessible pseudo-element to create a minimum touch width and
// height of 44px;
@mixin touch-min($-min-width: false) {
  &::after {
    @if $-min-width {
      min-width: 44px;
    }

    display: block;
    content: '';
    width: 100%;
    height: 100%;
    min-height: $touch-min;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Focus *ring* that's either inside of container, 'inset'; directly around of container, 'tight'; or *appears* to be outside of container.
@mixin focus-ring($color: var(--color-primary), $style: null) {
  &:focus {
    outline: none;
    position: relative;
    z-index: 1;

    @if $style == 'tight' {
      box-shadow: 0 0 0 2px $color;
    }

    @else if $style == 'inset' {
      box-shadow: inset 0 0 0 2px $color;
    }

    @else {
      box-shadow: 0 0 0 2px var(--white), 0 0 0 4px $color;
    }
  }
}

// Styles for an "arrow menu" menu item; checkmark icon on active, arrow icon on
// hover
@mixin arrow-menu-item {
  color: inherit;
  text-decoration: none;
  display: flex;
  justify-content: space-between;
  align-items: center;

  .navbar__sub-menu__icon {
    margin-left: 18px;
    width: 16px;
    height: 16px;
    display: none;
  }

  &.is-active {
    color: var(--color-text-lightest);
    background: var(--color-bg-dark);
    border-color: var(--color-bg-dark);

    .navbar__sub-menu__icon {
      fill: var(--color-text-lightest);
    }

    .navbar__sub-menu__icon--check {
      display: block;
    }
  }

  // Pseudo-element to occupy the space that an icon would take up
  &::after {
    display: inline-block;
    content: '';
    width: 16px;
    height: 16px;
    margin-left: 18px;
  }

  // When hovering or active, we don't need the icon placeholder anymore
  &.is-active,
  &:focus,
  &:hover {
    &::after {
      display: none;
    }
  }

  &:focus,
  &:hover {
    background-color: var(--color-primary);
    color: var(--color-text-lightest);

    .navbar__sub-menu__icon {
      fill: var(--color-text-lightest);
    }

    .navbar__sub-menu__icon--check {
      display: none;
    }

    .navbar__sub-menu__icon--arrow-right {
      display: block;
    }
  }
}

// Alpha color mixin for custom property hsl values.
// From https://codyhouse.co/blog/post/how-to-combine-sass-color-functions-and-css-variables

// return css color variable with different opacity value
@function alpha($color, $opacity) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});

  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Use a SASS mixin to define each color to generate hue, saturation and lightness values automatically in CSS.
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}
