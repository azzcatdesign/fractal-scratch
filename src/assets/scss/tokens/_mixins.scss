// Make a line of text touch accessible by forcing a width and height of 44px
@mixin text-touch {
  display: inline-flex;
  align-items: center;
  justify-content: flex-start;
  min-height: 44px;
  min-width: 44px;
}

// Add a touch-accessible pseudo-element to create a minimum touch width and
// height of 44px;
@mixin touch-min($-min-width: false) {
  &::after {
    @if $-min-width {
      min-width: 44px;
    }

    display: block;
    content: '';
    width: 100%;
    height: 100%;
    min-height: $touch-min;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin focus-ring($color: var(--color-primary), $style: null) {
  &:focus {
    outline: none;
    position: relative;
    z-index: 1;

    @if $style == 'tight' {
      box-shadow: 0 0 0 2px $color;
    }

    @else if $style == 'inset' {
      box-shadow: inset 0 0 0 2px $color;
    }

    @else {
      box-shadow: 0 0 0 2px var(--white), 0 0 0 4px $color;
    }
  }
}

// Styles for an "arrow menu" menu item; checkmark icon on active, arrow icon on
// hover
@mixin arrow-menu-item {
  color: inherit;
  text-decoration: none;
  display: flex;
  justify-content: space-between;
  align-items: center;

  .navbar__sub-menu__icon {
    margin-left: 18px;
    width: 16px;
    height: 16px;
    display: none;
  }

  &.is-active {
    color: var(--color-text-lightest);
    background: var(--color-bg-dark);
    border-color: var(--color-bg-dark);

    .navbar__sub-menu__icon {
      fill: var(--color-text-lightest);
    }

    .navbar__sub-menu__icon--check {
      display: block;
    }
  }

  // Pseudo-element to occupy the space that an icon would take up
  &::after {
    display: inline-block;
    content: '';
    width: 16px;
    height: 16px;
    margin-left: 18px;
  }

  // When hovering or active, we don't need the icon placeholder anymore
  &.is-active,
  &:focus,
  &:hover {
    &::after {
      display: none;
    }
  }

  &:focus,
  &:hover {
    background-color: var(--color-primary);
    color: var(--color-text-lightest);

    .navbar__sub-menu__icon {
      fill: var(--color-text-lightest);
    }

    .navbar__sub-menu__icon--check {
      display: none;
    }

    .navbar__sub-menu__icon--arrow-right {
      display: block;
    }
  }
}

// For Inter Font Family
@mixin text-crop($line-height: 1.3, $top-adjustment: 0, $bottom-adjustment: 0) {
  // Configured in Step 1
  $top-crop: 4;
  $bottom-crop: 5;
  $crop-font-size: 16;
  $crop-line-height: 1.3125;

  // Apply values to calculate em-based margins that work with any font size
  $dynamic-top-crop: max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
  $dynamic-bottom-crop: max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

  // Mixin output
  line-height: $line-height;

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
    width: 0;
  }

  &::before {
    margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
  }

  &::after {
    margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
  }
}

// Mixin generated at: http://text-crop.eightshapes.com/?typeface-selection=google-font&typeface=Inter&custom-typeface-name=Helvetica&custom-typeface-url=&custom-typeface-weight=400&custom-typeface-style=normal&weight-and-style=500&size=16&line-height=1.3125&top-crop=4&bottom-crop=6

/* Usage Examples
.my-level-1-heading-class {
  @include text-crop; // Will use default line height of 1.3
  font-size: 48px;
  margin: 0 0 0 16px;
}

.my-level-2-heading-class {
  @include text-crop; // Will use default line height of 1.3
  font-size: 32px; // Don't need to change any settings, will work with any font size automatically
  margin: 0 0 0 16px;
}

.my-body-copy-class {
  @include text-crop($line-height: 2); // Larger line height desired, set the line height via the mixin
  font-size: 16px;
}

// Sometimes depending on the font-size, the rendering, the browser, etc. you may need to tweak the output.
// You can adjust the top and bottom cropping when invoking the component using the $top-adjustment and $bottom-adjustment settings

.slight-adjustment-needed {
  @include text-crop($top-adjustment: -0.5px, $bottom-adjustment: 2px);
  font-size: 17px;
}

.don't-do-this {
  @include text-crop;
  font-size: 16px;
  line-height: 3; // DO NOT set line height outside of the mixin, the mixin needs the line height value to calculate the crop correctly
}
*/
