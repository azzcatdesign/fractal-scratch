/**
 * hsla = hue, saturation, lightness, alpha
 */

// Alpha color mixin for custom property hsl values.
// From https://codyhouse.co/blog/post/how-to-combine-sass-color-functions-and-css-variables

// return css color variable with different saturation value
@function saturation($color, $saturationMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, calc(#{$color-s} * #{$saturationMultiplier}), $color-l);
}

// return css color variable with different lightness value
@function lightness($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// return css color variable with different opacity value
@function alpha($color, $opacity) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});

  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Use a SASS mixin to define each color to generate hue, saturation and lightness values automatically in CSS.
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

:root {
  /* UI Hued Grays */

  @include defineColorHSL(--black, 0, 0%, 0%);
  @include defineColorHSL(--color-near-black, 223, 39%, 18%); // #1C2640
  @include defineColorHSL(--color-gray-90, 223, 24%, 26%); // #323B52
  @include defineColorHSL(--color-gray-80, 223, 17%, 34%); // #474F64
  @include defineColorHSL(--color-gray-70, 223, 12%, 41%); // #5D6476
  @include defineColorHSL(--color-gray-60, 224, 9%, 49%); // #717687
  @include defineColorHSL(--color-gray-50, 223, 8%, 56%); // #878C99
  @include defineColorHSL(--color-gray-40, 223, 8%, 64%); // #9DA1AB
  @include defineColorHSL(--color-gray-30, 228, 7%, 72%); // #B3B5BD
  @include defineColorHSL(--color-gray-20, 223, 7%, 80%); // #C8CACF
  @include defineColorHSL(--color-gray-10, 210, 6%, 87%); // #DDDFE1
  @include defineColorHSL(--color-gray-5, 210, 5%, 91%); // #E8E9EA
  @include defineColorHSL(--white, 0, 0%, 100%);

  /* Color vars mapped to semantic vars */

  // General Backgrounds
  --color-bg-default: var(--white);
  --color-bg-gray: hsl(220, 16%, 96%); // #F4F5F7
  --color-bg-gray-light: hsl(0, 0%, 98%); // #FAFAFA
  --color-bg-dark: var(--color-near-black);

  // Text
  --color-text-body: var(--color-near-black);
  --color-text-lightest: var(--white);
  --color-text-darkest: var(--black);
  --color-text-quiet: var(--color-gray-60);
  --color-text-title: var(--color-near-black);

  /* Application Colors */

  // Alert
  @include defineColorHSL(--color-alert, 335, 100%, 43%);  // #DD005D, AA pass

  // Caution
  @include defineColorHSL(--color-caution, 46, 100%, 50%);  // #FFC400, AA fail

  // Info
  @include defineColorHSL(--color-info, 195, 100%, 48%); // #00B9F4, AA fail

  // Success
  @include defineColorHSL(--color-success, 173, 100%, 37%); // #00BBA5, AA fail

  // Tag
  @include defineColorHSL(--color-tag, 183, 54%, 85%); // #c6ecee
}

/**
 * Color Theming Options
 */

// Default Color Theme. Brighter tones than neutral theme.
:root,
[data-color-theme="color-theme-default"] {

  // Primary color-theme-default
  @include defineColorHSL(--color-primary, 223, 84%, 50%); // #1450EB

  // Secondary color-theme-default
  @include defineColorHSL(--color-secondary, 189, 100%, 28%); // #00798F

  // Secondary Alt color-theme-default
  @include defineColorHSL(--color-secondary-alt, 196, 72%, 39%); // #1C84AB

  // Tertiary color-theme-default
  @include defineColorHSL(--color-tertiary, 261, 88%, 30%); // #380990

  // Tertiary Alt color-theme-default
  @include defineColorHSL(--color-tertiary-alt, 260, 50%, 34%); // #482B80

  // Gradient color-theme-default
  --color-gradient:
    linear-gradient(
      270.17deg,
      var(--color-secondary) 0.27%,
      var(--color-secondary-alt) 27.79%,
      var(--color-tertiary-alt) 99.97%
    );
}

// Neutral Color Theme
[data-color-theme="color-theme-neutral"] {

  // Primary color-theme-neutral
  @include defineColorHSL(--color-primary, 223, 49%, 52%); // #496BC0

  // Secondary color-theme-neutral
  @include defineColorHSL(--color-secondary, 221, 8%, 53%); // #7D8390, AA Fail

  // Tertiary color-theme-neutral
  @include defineColorHSL(--color-tertiary, 223, 25%, 40%); // #4C5B80

  // Gradient color-theme-neutral
  --color-gradient:
    linear-gradient(
      270.17deg,
      var(--color-secondary) 0.27%,
      var(--color-tertiary) 99.97%
    );
}

// Teal Color Theme
[data-color-theme="color-theme-teal"] {

  // Primary color-theme-teal
  @include defineColorHSL(--color-primary, 223, 96%, 42%); // #043DD3

  // Secondary color-theme-teal
  @include defineColorHSL(--color-secondary, 189, 100%, 28%); // #00798F

  // Tertiary color-theme-teal
  @include defineColorHSL(--color-tertiary, 201, 63%, 30%); // #1C5B7D

  // Gradient color-theme-teal
  --color-gradient:
    linear-gradient(
      270.17deg,
      var(--color-secondary) 0.27%,
      var(--color-tertiary) 99.97%
    );
}
